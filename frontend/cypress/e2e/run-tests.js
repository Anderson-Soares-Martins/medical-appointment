#!/usr/bin/env node

/**
 * üß™ Script de Execu√ß√£o dos Testes E2E
 * 
 * Como usar:
 * node run-tests.js [full|critical|quick|auth|patient|doctor]
 * 
 * Exemplos:
 * node run-tests.js full          # Executa todos os testes
 * node run-tests.js critical      # Executa testes cr√≠ticos
 * node run-tests.js quick         # Executa testes r√°pidos
 * node run-tests.js auth          # Executa apenas autentica√ß√£o
 * node run-tests.js patient       # Executa jornada do paciente
 * node run-tests.js doctor        # Executa jornada do m√©dico
 */

const { execSync } = require('child_process');
const path = require('path');

// Importa configura√ß√µes (simulado - adapte para seu ambiente)
const config = {
  FULL_TEST_ORDER: [
    'cypress/e2e/auth/auth_login_valid.cy.js',
    'cypress/e2e/auth/auth_register_patient.cy.js',
    'cypress/e2e/auth/auth_invalid_credentials.cy.js',
    'cypress/e2e/app/doctors.cy.js',
    'cypress/e2e/appointments/appointment_schedule.cy.js',
    'cypress/e2e/app/appointments.cy.js',
    'cypress/e2e/app/doctor_dashboard.cy.js',
    'cypress/e2e/app/doctor_today_appointments.cy.js',
    'cypress/e2e/app/doctor_appointments.cy.js',
    'cypress/e2e/app/doctor_history.cy.js',
    'cypress/e2e/app/doctor_patients.cy.js',
    'cypress/e2e/app/patients.cy.js'
  ],

  CRITICAL_TESTS: [
    'cypress/e2e/auth/auth_login_valid.cy.js',
    'cypress/e2e/appointments/appointment_schedule.cy.js',
    'cypress/e2e/app/doctor_dashboard.cy.js',
    'cypress/e2e/app/doctor_today_appointments.cy.js'
  ],

  QUICK_TESTS: [
    'cypress/e2e/auth/auth_login_valid.cy.js',
    'cypress/e2e/app/doctors.cy.js',
    'cypress/e2e/appointments/appointment_schedule.cy.js'
  ],

  AUTH_TESTS: [
    'cypress/e2e/auth/auth_login_valid.cy.js',
    'cypress/e2e/auth/auth_register_patient.cy.js',
    'cypress/e2e/auth/auth_invalid_credentials.cy.js'
  ],

  PATIENT_TESTS: [
    'cypress/e2e/auth/auth_login_valid.cy.js',
    'cypress/e2e/app/doctors.cy.js',
    'cypress/e2e/appointments/appointment_schedule.cy.js',
    'cypress/e2e/app/appointments.cy.js'
  ],

  DOCTOR_TESTS: [
    'cypress/e2e/auth/auth_login_valid.cy.js',
    'cypress/e2e/app/doctor_dashboard.cy.js',
    'cypress/e2e/app/doctor_today_appointments.cy.js',
    'cypress/e2e/app/doctor_appointments.cy.js',
    'cypress/e2e/app/doctor_history.cy.js',
    'cypress/e2e/app/doctor_patients.cy.js'
  ]
};

// Fun√ß√£o para encontrar o diret√≥rio frontend
function findFrontendDirectory() {
  const currentDir = process.cwd();
  const scriptDir = path.dirname(__filename);

  // Se o script est√° em frontend/cypress/e2e, ent√£o frontend √© 2 n√≠veis acima
  const frontendDir = path.resolve(scriptDir, '..', '..');

  // Verifica se existe cypress.config.js no diret√≥rio frontend
  const fs = require('fs');
  const cypressConfig = path.join(frontendDir, 'cypress.config.js');

  if (fs.existsSync(cypressConfig)) {
    return frontendDir;
  }

  // Fallback: procura por frontend no diret√≥rio atual
  const altFrontendDir = path.join(currentDir, 'frontend');
  if (fs.existsSync(path.join(altFrontendDir, 'cypress.config.js'))) {
    return altFrontendDir;
  }

  // Se n√£o encontrar, retorna o diret√≥rio atual
  return currentDir;
}

// Fun√ß√£o para exibir ajuda
function showHelp() {
  console.log(`
üß™ Script de Execu√ß√£o dos Testes E2E - MedConsult

üìã USO:
  node run-tests.js [TIPO] [OP√á√ïES]

üéØ TIPOS DE TESTE:
  full        Executa todos os testes (recomendado)
  critical    Executa testes cr√≠ticos (mais r√°pido)
  quick       Executa testes b√°sicos (desenvolvimento)
  auth        Executa apenas autentica√ß√£o
  patient     Executa jornada do paciente
  doctor      Executa jornada do m√©dico

‚ö° OP√á√ïES:
  --headed    Executa com interface visual
  --help      Mostra esta ajuda

üìù EXEMPLOS:
  node run-tests.js full
  node run-tests.js critical --headed
  node run-tests.js patient
  node run-tests.js doctor

üöÄ ORDEM COMPLETA TESTADA:
  1. Autentica√ß√£o (Login, Cadastro, Valida√ß√µes)
  2. Jornada do Paciente (Maria ‚Üí Lista m√©dicos ‚Üí Agenda com Dra. Ana)
  3. Jornada do M√©dico (Dra. Ana ‚Üí Dashboard ‚Üí Gerencia consultas)
  4. Controle de Acesso (Valida√ß√µes de permiss√£o)
  
‚è±Ô∏è  TEMPO ESTIMADO:
  full: 15-20 minutos | critical: 5-8 minutos | quick: 3-5 minutos
  `);
}

// Fun√ß√£o para exibir informa√ß√µes do teste
function showTestInfo(testType) {
  const configs = {
    full: {
      title: 'üß™ Executando Testes E2E Completos',
      description: 'Fluxo completo: Autentica√ß√£o ‚Üí Paciente ‚Üí M√©dico',
      tests: config.FULL_TEST_ORDER.length,
      estimated: '15-20 minutos',
      details: [
        '‚úÖ Login de Maria e Dra. Ana',
        '‚úÖ Maria agenda consulta com Dra. Ana',
        '‚úÖ Dra. Ana gerencia consultas',
        '‚úÖ Valida√ß√µes de seguran√ßa'
      ]
    },
    critical: {
      title: '‚ö° Executando Testes Cr√≠ticos',
      description: 'Funcionalidades essenciais do sistema',
      tests: config.CRITICAL_TESTS.length,
      estimated: '5-8 minutos',
      details: [
        '‚úÖ Login v√°lido',
        '‚úÖ Agendamento de consulta',
        '‚úÖ Dashboard do m√©dico',
        '‚úÖ Consultas de hoje'
      ]
    },
    quick: {
      title: 'üöÄ Executando Testes R√°pidos',
      description: 'Funcionalidades b√°sicas para desenvolvimento',
      tests: config.QUICK_TESTS.length,
      estimated: '3-5 minutos',
      details: [
        '‚úÖ Login v√°lido',
        '‚úÖ Lista de m√©dicos',
        '‚úÖ Agendamento b√°sico'
      ]
    },
    auth: {
      title: 'üîê Executando Testes de Autentica√ß√£o',
      description: 'Login, cadastro e valida√ß√µes',
      tests: config.AUTH_TESTS.length,
      estimated: '3-5 minutos',
      details: [
        '‚úÖ Login v√°lido (Maria e Dra. Ana)',
        '‚úÖ Cadastro de paciente e m√©dico',
        '‚úÖ Valida√ß√µes de erro'
      ]
    },
    patient: {
      title: 'üë§ Executando Jornada do Paciente',
      description: 'Fluxo completo do paciente Maria',
      tests: config.PATIENT_TESTS.length,
      estimated: '8-12 minutos',
      details: [
        '‚úÖ Login de Maria',
        '‚úÖ Visualiza√ß√£o de m√©dicos',
        '‚úÖ Agendamento com Dra. Ana',
        '‚úÖ Gerenciamento de consultas'
      ]
    },
    doctor: {
      title: 'üë®‚Äç‚öïÔ∏è Executando Jornada do M√©dico',
      description: 'Fluxo completo da Dra. Ana Costa',
      tests: config.DOCTOR_TESTS.length,
      estimated: '10-15 minutos',
      details: [
        '‚úÖ Login da Dra. Ana',
        '‚úÖ Dashboard com estat√≠sticas',
        '‚úÖ Consultas de hoje',
        '‚úÖ Gerenciamento completo',
        '‚úÖ Hist√≥rico e pacientes'
      ]
    }
  };

  const testConfig = configs[testType] || configs.full;

  console.log('\n' + '='.repeat(60));
  console.log(testConfig.title);
  console.log('='.repeat(60));
  console.log(`üìã ${testConfig.description}`);
  console.log(`üß™ N√∫mero de testes: ${testConfig.tests}`);
  console.log(`‚è±Ô∏è  Tempo estimado: ${testConfig.estimated}`);
  console.log('\nüìù O que ser√° testado:');
  testConfig.details.forEach(detail => console.log(`   ${detail}`));
  console.log('='.repeat(60) + '\n');
}

// Fun√ß√£o para executar testes
function runTests(testType = 'full', headed = false) {
  const testSets = {
    full: config.FULL_TEST_ORDER,
    critical: config.CRITICAL_TESTS,
    quick: config.QUICK_TESTS,
    auth: config.AUTH_TESTS,
    patient: config.PATIENT_TESTS,
    doctor: config.DOCTOR_TESTS
  };

  const tests = testSets[testType];

  if (!tests) {
    console.error(`‚ùå Tipo de teste inv√°lido: ${testType}`);
    showHelp();
    process.exit(1);
  }

  // Mostra informa√ß√µes antes de executar
  showTestInfo(testType);

  // Encontra o diret√≥rio frontend
  const frontendDir = findFrontendDirectory();
  console.log(`üìÅ Diret√≥rio frontend: ${frontendDir}`);

  // Constr√≥i comando
  const specList = tests.join(',');
  const headedFlag = headed ? '--headed' : '';
  const command = `npx cypress run --spec "${specList}" ${headedFlag}`.trim();

  console.log(`üöÄ Executando comando: ${command}`);
  console.log(`üìÇ No diret√≥rio: ${frontendDir}\n`);

  try {
    // Executa os testes no diret√≥rio frontend
    execSync(command, {
      stdio: 'inherit',
      cwd: frontendDir
    });

    console.log('\n‚úÖ Todos os testes executados com sucesso!');

    // Mostra resumo
    console.log('\nüìä RESUMO DA EXECU√á√ÉO:');
    console.log(`   Tipo: ${testType}`);
    console.log(`   Testes executados: ${tests.length}`);
    console.log(`   Modo: ${headed ? 'Interface visual' : 'Headless'}`);
    console.log(`   Diret√≥rio: ${frontendDir}`);

  } catch (error) {
    console.error('\n‚ùå Erro durante execu√ß√£o dos testes:');
    console.error(error.message);

    // Sugest√µes de troubleshooting
    console.log('\nüîß TROUBLESHOOTING:');
    console.log('1. Verifique se o servidor est√° rodando: npm run dev');
    console.log('2. Instale depend√™ncias: npm install');
    console.log('3. Verifique se o Cypress est√° configurado corretamente');
    console.log('4. Tente executar um teste individual primeiro');

    process.exit(1);
  }
}

// Fun√ß√£o principal
function main() {
  const args = process.argv.slice(2);

  // Verifica se √© pedido de ajuda
  if (args.includes('--help') || args.includes('-h')) {
    showHelp();
    return;
  }

  // Pega tipo de teste (padr√£o: full)
  const testType = args[0] || 'full';

  // Verifica se √© modo headed
  const headed = args.includes('--headed');

  // Valida tipo de teste
  const validTypes = ['full', 'critical', 'quick', 'auth', 'patient', 'doctor'];
  if (!validTypes.includes(testType)) {
    console.error(`‚ùå Tipo de teste inv√°lido: ${testType}`);
    console.error(`‚úÖ Tipos v√°lidos: ${validTypes.join(', ')}`);
    showHelp();
    process.exit(1);
  }

  // Executa testes
  runTests(testType, headed);
}

// Executa apenas se chamado diretamente
if (require.main === module) {
  main();
}

module.exports = {
  runTests,
  showHelp,
  showTestInfo,
  config
}; 